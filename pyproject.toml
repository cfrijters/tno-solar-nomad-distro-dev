[project]
name = "nomad-distribution"
description = "nomad distribution template"
version = "0.1"
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENSE" }
dependencies = [
  "chardet>=5.2.0",
  "nomad-lab[parsing, infrastructure]>=1.3.10",
  #"perovskite-solar-cell-database",
  #'nomad-porous-materials; sys_platform != "win32"',
  #"nomad-aitoolkit",
  #"nomad-simulations>=0.3.1",
  #"pynxtools[apm,ellips,mpes,raman,stm,xps,xrd]==0.9.1",
  #"nomad-schema-plugin-run>=1.0.1",
  #"nomad-normalizer-plugin-dos>=1.0",
  #"nomad-normalizer-plugin-soap>=1.0",
  #"nomad-normalizer-plugin-spectra>=1.0",
  #"nomad-normalizer-plugin-system>=1.0",
  #"nomad-parser-plugins-electronic>=1.0",
  #"nomad-parser-plugins-atomistic>=1.0",
  #"nomad-parser-plugins-database>=1.0",
  #"nomad-external-eln-integrations",
  "tno-solar-nomad-plugin-base",
]

[tool.uv.workspace]
members = ["packages/*"]

[tool.uv.sources]
nomad-lab = { workspace = true }
#nomad-aitoolkit = { git = "https://github.com/FAIRmat-NFDI/nomad-aitoolkit.git", rev = "b203f8eb28dc4b6771a39d5c5b7ad3d9d8583ac8" }
#nomad-porous-materials = { git = "https://github.com/FAIRmat-NFDI/nomad-porous-materials.git", rev = "522f4a3208077f534f1c5e886527ee2104283d0b" }
#perovskite-solar-cell-database = { git = "https://github.com/FAIRmat-NFDI/nomad-perovskite-solar-cells-database.git", tag = "v0.1.1" }
#nomad-external-eln-integrations = { git = "https://github.com/FAIRmat-NFDI/nomad-external-eln-integrations", rev = "de8050effb510fc2be0974cb08d44b475791b0a5" }
tno-solar-nomad-plugin-base = { workspace = true }

[tool.uv]
extra-index-url = [
  "https://gitlab.mpcdf.mpg.de/api/v4/projects/2187/packages/pypi/simple",
]
dev-dependencies = [
  "nomad-lab[parsing, infrastructure, dev]>=1.3.4",
  "poethepoet>=0.29.0",
  "pydantic>=1.10.21",
  "numpy>=1.26.4",
]
constraint-dependencies = ["hyperspy>=1.7.6"]
required-version = ">=0.5.14"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 200 # it's 2025, we have wide screens now
indent-width = 4


[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # isort
    "I",
    # pylint
    "PL",
]

ignore = [
    "F403", # 'from module import *' used; unable to detect undefined names
    "E501", # line too long 
]

fixable = ["ALL"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.poe.tasks]
submodule = "git submodule update --init --recursive"
docker = "docker compose up -d"
start = "nomad admin run appworker"
setup = ["gui-env", "gui-setup", "docker", "config"]
lint = ["ruff-lint", "ruff-format"]

[tool.poe.tasks.config]
shell = """
import os;
if not os.path.exists("nomad.yaml"):
    with open("nomad.yaml", "w") as f:
        f.write("keycloak:\\n  realm_name: \\"fairdi_nomad_test\\"\\n")
"""
interpreter = "python"

[tool.poe.tasks.gui-env]
cmd = "python -W ignore -m nomad.cli dev gui-env"
capture_stdout = "packages/nomad-FAIR/gui/.env.development"

[tool.poe.tasks.docs]
cmd = "mkdocs serve"
cwd = "packages/nomad-FAIR"

[tool.poe.tasks.ruff-lint]
cmd = "ruff check ."

[tool.poe.tasks.ruff-format]
cmd = "ruff format . --check"

[tool.poe.tasks.gui]
cmd = "yarn run"
cwd = "packages/nomad-FAIR/gui"

[tool.poe.tasks.gui-setup]
cmd = "yarn"
cwd = "packages/nomad-FAIR/gui"

[tool.poe.tasks.gen-gui-test-env]
cmd = "python -W ignore -m nomad.cli dev gui-config"
capture_stdout = "packages/nomad-FAIR/gui/tests/env.js"
env = { NOMAD_CONFIG = "packages/nomad-FAIR/gui/tests/nomad.yaml" }

[tool.poe.tasks.gen-nomad-lock]
cmd = "uv pip compile -U --universal -p 3.11 --extra parsing --extra infrastructure --extra dev --annotation-style=line pyproject.toml requirements.txt"
capture_stdout = "packages/nomad-FAIR/requirements-dev.txt"
cwd = "packages/nomad-FAIR"
deps = ["gen-nomad-lock-without-dev"]

[tool.poe.tasks.gen-nomad-lock-without-dev]
cmd = "uv pip compile -U --universal -p 3.11 --extra parsing --extra infrastructure --annotation-style=line pyproject.toml"
cwd = "packages/nomad-FAIR"
capture_stdout = "packages/nomad-FAIR/requirements.txt"

